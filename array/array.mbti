package moonbitlang/core/array

alias @moonbitlang/core/quickcheck as @quickcheck

// Values

// Types and methods


impl FixedArray {
  all[T](Self[T], (T) -> Bool) -> Bool
  any[T](Self[T], (T) -> Bool) -> Bool
  contains[T : Eq](Self[T], T) -> Bool
  copy[T](Self[T]) -> Self[T]
  each[T](Self[T], (T) -> Unit) -> Unit
  eachi[T](Self[T], (Int, T) -> Unit) -> Unit
  ends_with[T : Eq](Self[T], Self[T]) -> Bool
  fold[A, B](Self[A], init~ : B, (B, A) -> B) -> B
  fold_left[T, U](Self[T], (U, T) -> U, init~ : U) -> U //deprecated
  fold_lefti[T, U](Self[T], (Int, U, T) -> U, init~ : U) -> U //deprecated
  fold_right[T, U](Self[T], (U, T) -> U, init~ : U) -> U //deprecated
  fold_righti[T, U](Self[T], (Int, U, T) -> U, init~ : U) -> U //deprecated
  foldi[A, B](Self[A], init~ : B, (Int, B, A) -> B) -> B
  from_array[T](Array[T]) -> Self[T]
  from_iter[T](Iter[T]) -> Self[T]
  is_sorted[T : Compare](Self[T]) -> Bool
  last[A](Self[A]) -> A?
  makei[T](Int, (Int) -> T) -> Self[T]
  map[T, U](Self[T], (T) -> U) -> Self[U]
  mapi[T, U](Self[T], (Int, T) -> U) -> Self[U]
  new[T](Int, () -> T) -> Self[T] //deprecated
  new_with_index[T](Int, (Int) -> T) -> Self[T] //deprecated
  op_add[T](Self[T], Self[T]) -> Self[T]
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
  rev[T](Self[T]) -> Self[T]
  rev_each[T](Self[T], (T) -> Unit) -> Unit
  rev_eachi[T](Self[T], (Int, T) -> Unit) -> Unit
  rev_fold[A, B](Self[A], init~ : B, (B, A) -> B) -> B
  rev_foldi[A, B](Self[A], init~ : B, (Int, B, A) -> B) -> B
  rev_inplace[T](Self[T]) -> Unit
  search[T : Eq](Self[T], T) -> Int?
  sort[T : Compare](Self[T]) -> Unit
  sort_by[T](Self[T], (T, T) -> Int) -> Unit
  sort_by_key[T, K : Compare](Self[T], (T) -> K) -> Unit
  stable_sort[T : Compare](Self[T]) -> Unit
  starts_with[T : Eq](Self[T], Self[T]) -> Bool
}


impl Array {
  copy[T](Self[T]) -> Self[T]
  from_iter[T](Iter[T]) -> Self[T]
  last[A](Self[A]) -> A?
  makei[T](Int, (Int) -> T) -> Self[T]
  map_option[A, B](Self[A], (A) -> B?) -> Self[B]
  push_iter[T](Self[T], Iter[T]) -> Unit
  shuffle[T](Self[T], rand~ : (Int) -> Int) -> Self[T]
  shuffle_in_place[T](Self[T], rand~ : (Int) -> Int) -> Unit
  sort[T : Compare](Self[T]) -> Unit
  sort_by[T](Self[T], (T, T) -> Int) -> Unit
  sort_by_key[T, K : Compare](Self[T], (T) -> K) -> Unit
}


impl ArrayView {
  all[T](Self[T], (T) -> Bool) -> Bool
  binary_search[T : Compare](Self[T], T) -> Result[Int, Int]
  binary_search_by[T](Self[T], (T) -> Int) -> Result[Int, Int]
  chunk_by[T](Self[T], (T, T) -> Bool) -> Self[Self[T]]
  chunks[T](Self[T], Int) -> Self[Self[T]]
  compare[T : Compare](Self[T], Self[T]) -> Int
  contains[T : Eq](Self[T], T) -> Bool
  each[T](Self[T], (T) -> Unit) -> Unit
  eachi[T](Self[T], (Int, T) -> Unit) -> Unit
  filter[T](Self[T], (T) -> Bool) -> Self[T]
  is_sorted[T : Compare](Self[T]) -> Bool
  last[T](Self[T]) -> T?
  map_inplace[T](Self[T], (T) -> T) -> Unit
  map_option[A, B](Self[A], (A) -> B?) -> Self[B]
  mapi_inplace[T](Self[T], (Int, T) -> T) -> Unit
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
  rev_each[T](Self[T], (T) -> Unit) -> Unit
  rev_eachi[T](Self[T], (Int, T) -> Unit) -> Unit
  rev_inplace[T](Self[T]) -> Unit
  search[T : Eq](Self[T], T) -> Int?
  search_by[T](Self[T], (T) -> Bool) -> Int?
  split[T](Self[T], (T) -> Bool) -> Self[Self[T]]
}

// Type aliases

// Traits

